name: Create Stable Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: true
        type: string

permissions:
  contents: write

jobs:
  build:
    # Required for workflow-dispatch
    permissions:
      actions: write
      
    name: Publish Release
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-22.04
            name: "Ubuntu GCC-11"
            artifact: "ubuntu_gcc.7z"
            build_type: "RelWithDebInfo"
            cc: "clang-14"
            cxx: "clang++-14"
            archiver: "7z a"
            generators: "Unix Makefiles"
            build_dir: 'build'
    steps:
      - uses: actions/checkout@v2
      
      - name: Install prerequisites
        shell: bash
        run:   |
          sudo apt-get install unzip
          
      - name: Determine Version
        shell: bash
        id: determine-version
        run:   |
          mkdir source
          wget https://github.com/${{ github.repository }}/archive/refs/tags/nightly.zip
          unzip nightly.zip -d source
          rm nightly.zip
          oldname=$(find source -mindepth 1 -maxdepth 1 -type d)
          mv "$oldname" source/pragma-nightly
          fileName="./source/pragma-nightly/core/shared/include/pragma/engine_version.h"
          readarray -t a < "$fileName"
          rm -r source
          
          strindex() { 
            x="${1%%"$2"*}"
            [[ "$x" = "$1" ]] && echo -1 || echo "${#x}"
          }
          
          getver() {
             strMajor="#define ENGINE_VERSION_$2 "
             idx=$(strindex "$1" "$strMajor")
             ver=-1
             if [ ! $idx -eq -1 ]; then
              ver=${i:${#strMajor}:${#i}}
             fi
             echo $ver
          }
          
          major=-1
          minor=-1
          rev=-1
          for i in "${a[@]}"
          do
             :
             v=$(getver "$i" "MAJOR")
             if [ ! $v -eq -1 ]; then
               major=$v
             fi
             v=$(getver "$i" "MINOR")
             if [ ! $v -eq -1 ]; then
               minor=$v
             fi
             v=$(getver "$i" "REVISION")
             if [ ! $v -eq -1 ]; then
               rev=$v
             fi
          done
          
          if [ $major -eq -1 ] || [ $minor -eq -1 ] || [ $rev -eq -1 ]; then
            exit 1
          else
            version="$major.$minor.$rev"
            echo "version=$version" >> $GITHUB_OUTPUT
          fi
          
      - name: Print Version
        shell: bash
        run:   |
          echo "Determined Version: ${{ steps.determine-version.outputs.version }}"

      - name: Get latest Windows Version
        id: windows-version
        shell: bash
        run:   |
          wget https://github.com/${{ github.repository }}/releases/download/nightly/pragma-win64.zip
          filename="pragma-v${{ steps.determine-version.outputs.version }}-win64.zip"
          mv pragma-win64.zip "$filename"
          echo "filename=$filename" >> $GITHUB_OUTPUT
        env:
          filename: ${{ steps.determine-version.outputs.filename }}

      - name: Get latest Linux Version
        id: linux-version
        shell: bash
        run:   |
          wget https://github.com/${{ github.repository }}/releases/download/nightly/pragma-lin64.tar.gz
          filename="pragma-v${{ steps.determine-version.outputs.version }}-lin64.tar.gz"
          mv pragma-lin64.tar.gz "$filename"
          echo "filename=$filename" >> $GITHUB_OUTPUT

      - name: Create Pragma Directory
        run: |
          mkdir pragma-windows
          mkdir pragma-linux

      - name: Extract Zip Archive
        run: |
          unzip -q "${{ steps.windows-version.outputs.filename }}" -d pragma-windows
          tar -xzvf "${{ steps.linux-version.outputs.filename }}" -C pragma-linux
          rm -f "${{ steps.windows-version.outputs.filename }}"
          rm -f "${{ steps.linux-version.outputs.filename }}"

      - name: Apply file changes
        run: |
          for dir in pragma-windows pragma-linux; do
            # Disable experimental updates in client.cfg
            sed -i 's/pfm_enable_experimental_updates "1"/pfm_enable_experimental_updates "0"/' "$dir/cfg/client.cfg"
          done

      - name: Re-create Zip Archives
        run: |
          for dir in pragma-windows pragma-linux; do
            # Disable experimental updates in client.cfg
            sed -i 's/pfm_enable_experimental_updates "1"/pfm_enable_experimental_updates "0"/' "$dir/cfg/client.cfg"
      
            # Re-create zip archive
            if [ "$dir" == "pragma-windows" ]; then
              cd pragma-windows
              7z a "${{ steps.windows-version.outputs.filename }}" "./**"
              mv "${{ steps.windows-version.outputs.filename }}" "../"
              cd ..
            elif [ "$dir" == "pragma-linux" ]; then
              cd pragma-linux
              tar -czvf "${{ steps.linux-version.outputs.filename }}" *
              mv "${{ steps.linux-version.outputs.filename }}" "../"
              cd ..
            fi

            # Remove the current directory
            rm -rf "$dir"
          done

      - name: Get PDB Debug Files
        id: pdb-debug
        shell: bash
        run:   |
          wget https://github.com/${{ github.repository }}/releases/download/nightly/debug_pdb.zip
          filename="debug_pdb.zip"
          echo "filename=$filename" >> $GITHUB_OUTPUT
          
      - name: Generate nightly tag description
        shell: bash
        run:   |
          curDate=$(date -u '+%Y-%m-%d %H:%M:%S %Z')
          printf "This release includes all files necessary to run Pragma, as well as the latest version of the Pragma Filmmaker.\nFor information on how to work with Pragma/PFM, please visit the [wiki](https://wiki.pragma-engine.com/).\n\nLatest release date: $curDate" > tag_text.txt

      - name: Update nightly tag description
        uses: softprops/action-gh-release@v0.1.15
        with:
          body_path: tag_text.txt
          tag_name: "v${{ steps.determine-version.outputs.version }}"
          prerelease: false

      - name: Publish Windows Release
        uses: pyTooling/Actions/releaser/composite@v4.2.2
        with:
          tag: "v${{ steps.determine-version.outputs.version }}"
          rm: true
          token: ${{ secrets.GITHUB_TOKEN }}
          files: ${{ steps.windows-version.outputs.filename }}
            
      - name: Publish Linux Release
        uses: pyTooling/Actions/releaser/composite@v4.2.2
        with:
          tag: "v${{ steps.determine-version.outputs.version }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          files: ${{ steps.linux-version.outputs.filename }}
            
      - name: Publish PDB Files
        uses: pyTooling/Actions/releaser/composite@v4.2.2
        with:
          tag: "v${{ steps.determine-version.outputs.version }}"
          token: ${{ secrets.GITHUB_TOKEN }}
          files: ${{ steps.pdb-debug.outputs.filename }}

      - name: Dispatch Generate Installer Workflow
        uses: benc-uk/workflow-dispatch@v1.2.4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          workflow: generate-installer-ci.yml
          inputs: '{ "version": "v${{ steps.determine-version.outputs.version }}", "tag": "${{ steps.determine-version.outputs.version }}" }'
