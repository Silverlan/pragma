name: Build Windows
on:
  push:
    branches: [ main, master, actions ]
  pull_request:
    branches: [ main, master, actions ]

concurrency:
  group: environment-win-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build - ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: windows-latest
            name: "Windows x64 MSVC"
            artifact: "Windows-MSVC.tar.xz"
            build_type: "RelWithDebInfo"
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
            cc: "cl"
            cxx: "cl"
            archiver: "7z a"
            generators: "Visual Studio 17 2022"
            build_dir: 'build'
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          submodules: 'recursive'
          
      - name: Print Volumes
        shell: pwsh
        run: |
          echo "Volumes:"
          Get-Volume
          
      - name: Setup
        id: setup
        uses: Silverlan/common_actions/setup@main
          
      - name: Download binaries
        uses: Silverlan/common_actions/download_build_binaries@main
        continue-on-error: true
          
      #- name: Build
      #  id: build
      #  uses: Silverlan/test_pragma_ga4/github_actions/build@master
      #  with:
      #    root_dir: "${{ env.GA_ROOT_DIR }}"
      #    should_checkout: "0"
      #    github_token: ${{ secrets.GITHUB_TOKEN }}
      #    dir: '.'
          
      - name: Initialize Env
        id: init-env
        uses: Silverlan/common_actions/set_common_env_vars@main

      - name: Create install directory
        shell: bash
        run:   |
          mkdir -p "${{ matrix.config.build_dir }}"
          mkdir -p "${{ matrix.config.build_dir }}/install"

      - uses: Silverlan/common_actions/get_submodule@main
        name: Get install assets
        with:
          repo: 'Silverlan/pragma_github_action_install_assets'
          repo_name: 'pragma_github_action_install_assets'
          dir: '${{ matrix.config.build_dir }}/install'
          repo_branch: 'main'
          clone_dir: '.'

      - name: Create addon directories
        shell: bash
        run:   |
          mkdir -p "${{ matrix.config.build_dir }}/install/addons"
          mkdir -p "${{ matrix.config.build_dir }}/install/addons/virtual_reality"
          mkdir -p "${{ matrix.config.build_dir }}/install/addons/halflife_campaign"
          mkdir -p "${{ matrix.config.build_dir }}/install/addons/tf2"
          mkdir -p "${{ matrix.config.build_dir }}/install/addons/filmmaker"
          mkdir -p "${{ matrix.config.build_dir }}/install/addons/tool_model_editor"
          
      - uses: Silverlan/common_actions/get_submodule@main
        name: Get PragmaVR
        with:
          repo: 'Silverlan/PragmaVR'
          repo_name: 'PragmaVR'
          dir: '${{ matrix.config.build_dir }}/install/addons/virtual_reality'
          repo_branch: 'main'
          clone_dir: '.'
          
      - uses: Silverlan/common_actions/get_submodule@main
        name: Get PragmaHL
        with:
          repo: 'Silverlan/pragma_hl'
          repo_name: 'pragma_hl'
          dir: '${{ matrix.config.build_dir }}/install/addons/halflife_campaign'
          repo_branch: 'main'
          clone_dir: '.'
          
      - uses: Silverlan/common_actions/get_submodule@main
        name: Get PragmaTF2
        with:
          repo: 'Silverlan/pragma_tf2'
          repo_name: 'pragma_tf2'
          dir: '${{ matrix.config.build_dir }}/install/addons/tf2'
          repo_branch: 'main'
          clone_dir: '.'
          
      - uses: Silverlan/common_actions/get_submodule@main
        name: Get PragmaMdlEd
        with:
          repo: 'Silverlan/pragma_model_editor'
          repo_name: 'pragma_model_editor'
          dir: '${{ matrix.config.build_dir }}/install/addons/tool_model_editor'
          repo_branch: 'main'
          clone_dir: '.'
          
      - uses: Silverlan/common_actions/get_submodule@main
        name: Get PFM
        with:
          repo: 'Silverlan/pfm'
          repo_name: 'pfm'
          dir: '${{ matrix.config.build_dir }}/install/addons/filmmaker'
          repo_branch: 'master'
          clone_dir: '.'
          force: '1'
          
      - name: Extract install assets
        shell: bash
        run:   |
          echo "Extracting bpy.zip..."
          7z x '${{ matrix.config.build_dir }}/install/modules/blender/site-packages/bpy.zip' -aos -y -o'${{ matrix.config.build_dir }}/install/modules/blender/site-packages/'
          rm -f '${{ matrix.config.build_dir }}/install/modules/blender/site-packages/bpy.zip'
          echo "Extracting libcef.zip..."
          7z x '${{ matrix.config.build_dir }}/install/modules/chromium/libcef.zip' -aos -y -o'${{ matrix.config.build_dir }}/install/modules/chromium/'
          rm -f '${{ matrix.config.build_dir }}/install/modules/chromium/libcef.zip'
          echo "Extracting UniRender_Cycles.zip..."
          7z x '${{ matrix.config.build_dir }}/install/modules/unirender/cycles/UniRender_Cycles.zip' -aos -y -o'${{ matrix.config.build_dir }}/install/modules/unirender/cycles/'
          rm -f '${{ matrix.config.build_dir }}/install/modules/unirender/cycles/UniRender_Cycles.zip'
        
      - name: Generate release zip
        shell: bash
        run: |
          curDir="$(pwd)"
          cd "/c"
          mkdir "release"
          cd "$curDir"
          7z a pragma.zip ".\${{ matrix.config.build_dir }}/install/**"
          rm -rf ".\${{ matrix.config.build_dir }}/install"
          mkdir -p ".\${{ matrix.config.build_dir }}/install"
          mv pragma.zip "/c/release/pragma.zip"
        
      - name: Build boost (with cache)
        uses: Silverlan/common_actions/build_cached_boost@main
        
      - name: Build Geometric tools
        uses: Silverlan/common_actions/build_geometric_tools@main
        
      # TODO: This should be output from build-boost action above
      - shell: bash
        name: Set boost shared suffix
        id: set-boost-var
        run: |
          boostSuffixShared="vc143-mt-x64-1_79.lib"
          echo ::set-output name=boostSuffixShared::$(echo $boostSuffixShared)
          
      - name: Set boost dependency CMake variables
        uses: Silverlan/common_actions/define_cmake_var@main
        with:
          cmake_var: ' -DDEPENDENCY_BOOST_INCLUDE=${{ env.GA_ROOT_DIR }}/third_party_libs/boost -DDEPENDENCY_BOOST_CHRONO_LIBRARY=${{ env.GA_ROOT_DIR }}/third_party_libs/boost/stage/lib/boost_chrono-${{ steps.set-boost-var.outputs.boostSuffixShared }} -DDEPENDENCY_BOOST_DATE_TIME_LIBRARY=${{ env.GA_ROOT_DIR }}/third_party_libs/boost/stage/lib/boost_date_time-${{ steps.set-boost-var.outputs.boostSuffixShared }} -DDEPENDENCY_BOOST_REGEX_LIBRARY=${{ env.GA_ROOT_DIR }}/third_party_libs/boost/stage/lib/boost_regex-${{ steps.set-boost-var.outputs.boostSuffixShared }} -DDEPENDENCY_BOOST_SYSTEM_LIBRARY=${{ env.GA_ROOT_DIR }}/third_party_libs/boost/stage/lib/boost_system-${{ steps.set-boost-var.outputs.boostSuffixShared }} -DDEPENDENCY_BOOST_THREAD_LIBRARY=${{ env.GA_ROOT_DIR }}/third_party_libs/boost/stage/lib/boost_thread-${{ steps.set-boost-var.outputs.boostSuffixShared }}'
          
      - name: Set external dependency CMake variables
        uses: Silverlan/common_actions/define_cmake_var@main
        with:
          cmake_var: ' -DDEPENDENCY_LIBVORBISFILE_LIBRARY=${{ env.GA_ROOT_DIR }}/build/third_party_libs/vorbis/lib/RelWithDebInfo/vorbisfile.lib -DDEPENDENCY_LIBVORBIS_LIBRARY=${{ env.GA_ROOT_DIR }}/build/third_party_libs/vorbis/lib/RelWithDebInfo/vorbis.lib -DDEPENDENCY_7ZPP_INCLUDE=${{ env.GA_ROOT_DIR }}/third_party_libs/7zpp/Include -DDEPENDENCY_7ZPP_LIBRARY=${{ env.GA_ROOT_DIR }}/build/third_party_libs/7zpp/RelWithDebInfo/7zpp.lib -DDEPENDENCY_LIBLZMA_INCLUDE=${{ env.GA_ROOT_DIR }}/external_libs/util_bsp/third_party_libs/liblzma/include -DDEPENDENCY_LIBZIP_CONF_INCLUDE=${{ env.GA_ROOT_DIR }}/build/third_party_libs/libzip -DDEPENDENCY_UTIL_VMF_INCLUDE=${{ env.GA_ROOT_DIR }}/external_libs/util_vmf/include -DDEPENDENCY_NVIDIA_TEXTURE_TOOLS_INCLUDE=${{ env.GA_ROOT_DIR }}/external_libs/util_image/third_party_libs/nvtt/src -DDEPENDENCY_LPNG_BUILD_INCLUDE=${{ env.GA_ROOT_DIR }}/build/third_party_libs/libpng -DDEPENDENCY_ZLIB_BUILD_INCLUDE=${{ env.GA_ROOT_DIR }}/build/third_party_libs/zlib -DDEPENDENCY_LIBOGG_INCLUDE=${{ env.GA_ROOT_DIR }}/third_party_libs/ogg/include -DDEPENDENCY_GEOMETRIC_TOOLS_INCLUDE=${{ env.GA_ROOT_DIR }}/third_party_libs/GeometricTools/GTE'
      
      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: 1.3.211.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader, Glslang
          vulkan-use-cache: true

      - name: Get spirv-tools
        uses: Silverlan/common_actions/get_submodule@main
        with:
          repo: 'https://github.com/KhronosGroup/SPIRV-Tools.git'
          repo_name: 'spirv-tools'
          repo_branch: 'sdk-1.3.211'
          dir: 'VULKAN_SDK'
          clone_dir: 'spirv-tools'

      - name: Get spirv-headers
        uses: Silverlan/common_actions/get_submodule@main
        with:
          repo: 'https://github.com/KhronosGroup/SPIRV-Headers.git'
          repo_name: 'spirv-tools'
          repo_branch: 'sdk-1.3.211'
          dir: 'VULKAN_SDK/spirv-tools/external'
          clone_dir: 'spirv-headers'
        
      - name: Install pkg-config
        id: install-pkg-config
        shell: bash
        run:   |
          choco install pkgconfiglite --allow-empty-checksums
          #apt-get install pkg-config
          #echo "ALL FILES:"
          #ls -R
          #echo "-- ALL FILES -- "
              
      - uses: Silverlan/common_actions/build_cmake@main
        name: Build UDM
        with:
          build_type: ${{ matrix.config.build_type }}
          build_generator: ${{ matrix.config.generators }}
          build_target: util_udm
          build_dir: '${{ matrix.config.build_dir }}/.'
          cmake_script_location: '.'
          pre_build_cmd: |
            echo "Building UDM library..."
            curDir="$(pwd)"
            cd "${{ env.GA_ROOT_DIR }}"
            curl -LJO "https://pragma-engine.com/git/github_actions/pragma.zip"
            7z x pragma.zip -aos -y
            rm -rf "./pragma.zip"
            cd "$curDir"
            
      #- name: Print all files
      #  id: print-all-files
      #  shell: bash
      #  run:   |
      #    echo "Post-build files:"
      #    ls -R
      #    echo "-- Post-build files -- "

      - name: Clear disk space
        shell: bash
        run:   |
          rm -rf "third_party_libs/boost/bin.v2/libs/math/build/msvc-14.3/release/link-static/threading-multi"
          rm -rf "third_party_libs/boost/bin.v2/libs/math/build/msvc-14.3/release/threading-multi"

      - name: List large directories
        shell: pwsh
        run: |
          cd "/"
          echo "Cur pwd: $(pwd)"
          $colItems = (Get-ChildItem -path $(pwd) $startFolder -recurse | Where-Object {$_.PSIsContainer -eq $True} | Sort-Object)
          foreach ($i in $colItems)
              {
                  $child = Get-ChildItem $i.FullName
                  $subFolderItems = ($child | Measure-Object -ErrorAction SilentlyContinue -property length -sum)
                  $size = $subFolderItems.sum / 1MB
                  if ($size -gt 50)
                  {
                        $i.FullName + " -- " + "{0:N2}" -f $size + " MB"
                  }
              }
              
      - name: Define CMake Variable
        uses: Silverlan/common_actions/define_cmake_var@main
        with:
          cmake_var: ' -DCMAKE_INSTALL_PREFIX=install '

      - uses: Silverlan/common_actions/build_cmake@main
        name: CMake Build
        with:
          build_type: ${{ matrix.config.build_type }}
          build_generator: ${{ matrix.config.generators }}
          build_target: pragma-install-full
          cmake_definitions_tmp: " -DCMAKE_INSTALL_PREFIX=install "
          build_dir: '${{ matrix.config.build_dir }}/.'
          cmake_script_location: '.'
          pre_build_cmd: |
            curDir="$(pwd)"
            cd "${{ env.GA_ROOT_DIR }}"
            curl -LJO "https://pragma-engine.com/git/github_actions/pragma.zip"
            7z x pragma.zip -aos -y
            rm -rf "./pragma.zip"
            cd "$curDir"
            
            # echo "--ALL FILES START--"
            # ls -R
            # echo "--ALL FILES END--"
            # cp ./build/third_party_libs/libpng/pnglibconf.h ./third_party_libs/libpng/pnglibconf.h
            # cp ./build/third_party_libs/zlib/zconf.h ./third_party_libs/zlib/zconf.h
            
      - name: Print cmake_install
        shell: bash
        run:   |
          cat "${{ matrix.config.build_dir }}/cmake_install.cmake"

      - uses: Silverlan/common_actions/build_cmake@main
        name: CMake Build PFM Executable
        with:
          build_type: ${{ matrix.config.build_type }}
          build_generator: ${{ matrix.config.generators }}
          build_target: pfm
          cmake_definitions_tmp: " -DCMAKE_INSTALL_PREFIX=install "
          build_dir: '${{ matrix.config.build_dir }}/.'
          configure: '0'
          cmake_script_location: '.'

      - uses: Silverlan/common_actions/build_cmake@main
        name: Post-build install
        with:
          build_type: ${{ matrix.config.build_type }}
          build_generator: ${{ matrix.config.generators }}
          build_target: pragma-install
          cmake_definitions_tmp: " -DCMAKE_INSTALL_PREFIX=install "
          build_dir: '${{ matrix.config.build_dir }}/.'
          configure: '0'
          cmake_script_location: '.'
            
      - name: Clear disk space
        shell: bash
        run: |
          find . -name "*.pdb" -type f -delete
          find . -name "*.obj" -type f -delete
            
      #- name: Run test
      #  shell: bash
      #  run: |
      #    curDir="$(pwd)"
      #    cd ${{ matrix.config.build_dir }}/install
      #    ./pragma_server +exit
      #    cd "$curDir"
          
      #- uses: actions/upload-artifact@v2.2.4
      #  with:
      #    name: build-release
      #    retention-days: 5
      #    path: |
      #      ${{ matrix.config.build_dir }}/install/**
   
      - name: Create info file
        shell: bash
        run: |
          echo -e "ref: $GITHUB_REF \ncommit: $GITHUB_SHA\nbuild: $(date +"%Y-%m-%dT%H:%M:%SZ")" \
          > ${{ matrix.config.build_dir }}/install/info.txt
          
      - name: Remove unnecessary git files
        shell: bash
        run: |
          rm -rf "${{ matrix.config.build_dir }}/install/.git"
          
      - name: Remove unnecessary third_party_libs files
        shell: bash
        run: |
          rm -rf "${{ matrix.config.build_dir }}/install/third_party_libs"

      - name: Finalize release zip
        shell: bash
        run: |
          curDir=$PWD
          cd ./${{ matrix.config.build_dir }}/install
          mv ./bin/pragma.exe ./pragma.exe
          mv ./bin/pragma_server.exe ./pragma_server.exe
          cd $curDir
          
          mv "/c/release/pragma.zip" "./pragma.zip"
          7z a pragma.zip ".\${{ matrix.config.build_dir }}/install/**"
          7z d pragma.zip .git
          7z d pragma.zip .gitignore
          7z d pragma.zip addons/filmmaker/.git
          7z d pragma.zip addons/filmmaker/.gitignore
          du -sh "./pragma.zip"
          zipinfo -1 "./pragma.zip"

      #- name: Publish release
      #  uses: softprops/action-gh-release@v1
      #  #if: startsWith(github.ref, 'refs/tags/')
      #  with:
      #    files: "pragma.zip"
      #    prerelease: 1
      #    tag_name: 'nightly'
      #    #body: 'Test Description 2'
      #    #generate_release_notes: 1

      - name: Generate nightly tag description
        shell: bash
        run:   |
          curDate=$(date -u '+%Y-%m-%d %H:%M:%S %Z')
          printf "This is an auto-generated pre-release, built from the latest version of the source code.\nIt includes all files necessary to run Pragma, as well as the latest version of the Pragma Filmmaker, however functionality and stability are **not** guaranteed.\n\nLatest release date: $curDate" > tag_text.txt

      - name: Update nightly tag description
        uses: softprops/action-gh-release@v0.1.14
        with:
          body_path: tag_text.txt
          tag_name: nightly
          prerelease: true

      - name: Update nightly release
        uses: pyTooling/Actions/releaser/composite@main
        with:
          tag: nightly
          rm: true
          token: ${{ secrets.GITHUB_TOKEN }}
          files: "pragma.zip"
