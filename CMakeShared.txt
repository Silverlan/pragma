cmake_minimum_required(VERSION 3.12)
set(CMAKE_CXX_STANDARD 20)

if(WIN32)
	add_compile_options(/wd4251)
	add_compile_options(/W1)
endif()

set(INCLUDE_DIRS)
function(add_include_dir IDENTIFIER)
	set(PRETTYNAME ${IDENTIFIER})
	set(ARGV ${ARGN})
	list(LENGTH ARGV ARGC)
	if(${ARGC} GREATER 0)
		list(GET ARGV 0 PRETTYNAME)
	endif()
	string(TOUPPER ${IDENTIFIER} UIDENTIFIER)

	set(${DEFAULT_DIR} "")
	set(DEPENDENCY_${UIDENTIFIER}_INCLUDE ${DEFAULT_DIR} CACHE PATH "Path to ${PRETTYNAME} include directory.")
	set(INCLUDE_DIRS ${INCLUDE_DIRS} DEPENDENCY_${UIDENTIFIER}_INCLUDE PARENT_SCOPE)
endfunction(add_include_dir)

set(LIBRARIES)
function(add_external_library IDENTIFIER)
	set(PRETTYNAME ${IDENTIFIER})
	set(ARGV ${ARGN})
	list(LENGTH ARGV ARGC)
	if(${ARGC} GREATER 0)
		list(GET ARGV 0 PRETTYNAME)
	endif()
	string(TOUPPER ${IDENTIFIER} UIDENTIFIER)

	# set(DEPENDENCY_${UIDENTIFIER}_LIBRARY "" CACHE FILEPATH "Path to ${PRETTYNAME} library.")
	find_library(DEPENDENCY_${UIDENTIFIER}_LIBRARY ${IDENTIFIER}.lib)
	set(LIBRARIES ${LIBRARIES} DEPENDENCY_${UIDENTIFIER}_LIBRARY PARENT_SCOPE)
endfunction(add_external_library)

function(link_external_library IDENTIFIER)
	set(PRETTYNAME ${IDENTIFIER})
	set(ARGV ${ARGN})
	list(LENGTH ARGV ARGC)
	if(${ARGC} GREATER 0)
		list(GET ARGV 0 PRETTYNAME)
	endif()
	string(TOUPPER ${IDENTIFIER} UIDENTIFIER)

	set(${DEFAULT_DIR} "")
	set(DEPENDENCY_${UIDENTIFIER}_INCLUDE ${DEFAULT_DIR} CACHE PATH "Path to ${PRETTYNAME} include directory.")
	set(INCLUDE_DIRS ${INCLUDE_DIRS} DEPENDENCY_${UIDENTIFIER}_INCLUDE PARENT_SCOPE)

	set(DEPENDENCY_${UIDENTIFIER}_LIBRARY "" CACHE FILEPATH "Path to ${PRETTYNAME} library.")
	set(LIBRARIES ${LIBRARIES} DEPENDENCY_${UIDENTIFIER}_LIBRARY PARENT_SCOPE)
endfunction(link_external_library)

link_external_library(mathutil)
link_external_library(sharedutils)
link_external_library(vfilesystem)
link_external_library(materialsystem)
link_external_library(datasystem)
link_external_library(luasystem)
link_external_library(LuaJIT)
link_external_library(luabind)
link_external_library(bullet)
link_external_library(networkmanager)
add_include_dir(glm)
# add_include_dir(boost)

function(def_vs_filters FILE_LIST)
	foreach(source IN LISTS FILE_LIST)
	    get_filename_component(source_path "${source}" PATH)
	    string(REPLACE "${CMAKE_CURRENT_LIST_DIR}" "" source_path_relative "${source_path}")
	    string(REPLACE "/" "\\" source_path_msvc "${source_path_relative}")
	    source_group("${source_path_msvc}" FILES "${source}")
	endforeach()
endfunction(def_vs_filters)

set(DEFINITIONS
	WIN32_LEAN_AND_MEAN
	USE_LUAJIT
	UVA_STATIC
	GLM_FORCE_DEPTH_ZERO_TO_ONE
	PHYS_ENGINE_BULLET
	LUABIND_DYNAMIC_LINK
	DEBUG_SOCKET
	ENABLE_MESH_FUNCTIONS
	NOISE_STATIC
)
# BOOST_ALL_DYN_LINK

function(add_def DEF)
	set(DEFINITIONS ${DEFINITIONS} ${DEF} PARENT_SCOPE)
endfunction(add_def)

set(BOOST_LIBRARIES)
function(link_boost_library PROJ_NAME LABEL LIB_NAME)
	if(WIN32)
		set(BOOST_LIB_NAME boost_${LIB_NAME}-vc141-mt-x64-1_76.lib)
	else()
		set(BOOST_LIB_NAME libboost_${LIB_NAME}.so)
	endif()

	find_library(${LABEL} ${BOOST_LIB_NAME} HINTS ${DEPENDENCY_BOOST_LIBRARY_LOCATION} NO_DEFAULT_PATH)
	target_link_libraries(${PROJ_NAME} ${${LABEL}})
endfunction(link_boost_library)

function(def_project PROJ_NAME PROJ_TYPE)
	project(pragma_${PROJ_NAME} CXX)

	file(GLOB_RECURSE SRC_FILES
	    "${CMAKE_CURRENT_LIST_DIR}/src/*.h"
	    "${CMAKE_CURRENT_LIST_DIR}/src/*.hpp"
	    "${CMAKE_CURRENT_LIST_DIR}/src/*.cpp"
	    "${CMAKE_CURRENT_LIST_DIR}/src/*.c"
	    "${CMAKE_CURRENT_LIST_DIR}/include/*.h"
	    "${CMAKE_CURRENT_LIST_DIR}/include/*.hpp"
	)

	if(${PROJ_TYPE} MATCHES "lib")
		add_library(${PROJ_NAME} SHARED ${SRC_FILES})
		set_target_properties(${PROJ_NAME} PROPERTIES LINK_FLAGS "-Wl,-rpath,$ORIGIN")
	else()
		add_executable(${PROJ_NAME} WIN32 ${SRC_FILES} ${ARGN})
		set_target_properties(${PROJ_NAME} PROPERTIES LINK_FLAGS "-Wl,-rpath,$ORIGIN/lib")
	endif()

	# set_target_properties(${PROJ_NAME} PROPERTIES INSTALL_RPATH "$ORIGIN/lib;$ORIGIN")
	if(WIN32)
		target_compile_options(${PROJ_NAME} PRIVATE /wd4251)
	endif()
	def_vs_filters("${SRC_FILES}")

	option(CONFIG_ENABLE_BULLET_PROFILING "Enable profiling for bullet physics." OFF)
	if(CONFIG_ENABLE_BULLET_PROFILING)
		target_compile_definitions(${PROJ_NAME} PUBLIC BT_ENABLE_PROFILE)
	endif()

	foreach(def IN LISTS DEFINITIONS)
		target_compile_definitions(${PROJ_NAME} PUBLIC ${def})
	endforeach(def)

	link_boost_library(${PROJ_NAME} DEPENDENCY_BOOST_SYSTEM_LIBRARY system)

	foreach(LIB IN LISTS LIBRARIES)
		target_link_libraries(${PROJ_NAME} ${${LIB}})
	endforeach(LIB)

	set(DEPENDENCY_BOOST_LIBRARY_LOCATION "" CACHE FILEPATH "Path to boost libraries.")
	target_include_directories(${PROJ_NAME} PRIVATE ${CMAKE_CURRENT_LIST_DIR}/include)
	target_include_directories(${PROJ_NAME} PRIVATE ${CMAKE_CURRENT_LIST_DIR}/src)

	foreach(INCLUDE_PATH IN LISTS INCLUDE_DIRS)
		target_include_directories(${PROJ_NAME} PRIVATE ${${INCLUDE_PATH}})
	endforeach(INCLUDE_PATH)

	set(TARGET_PROPERTIES LINKER_LANGUAGE CXX)
	if(DEFINED PRECOMPILED_HEADER)
		message("Using precompiled header src/${PRECOMPILED_HEADER}.h for project ${PROJ_NAME}")
		target_precompile_headers(${PROJ_NAME} PRIVATE "src/${PRECOMPILED_HEADER}.h")

		# Disable precompiled headers for c-files
		file(GLOB_RECURSE SRC_C_FILES
		    "${CMAKE_CURRENT_LIST_DIR}/src/*.c"
		)
		set_source_files_properties("${SRC_C_FILES}" PROPERTIES SKIP_PRECOMPILE_HEADERS ON)
	endif()
	set_target_properties(${PROJ_NAME} PROPERTIES ${TARGET_PROPERTIES})
endfunction(def_project)

