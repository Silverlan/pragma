#ifndef F_SH_PARALLAXMAPPING_GLS
#define F_SH_PARALLAXMAPPING_GLS

#include "sh_uniform_locations.gls"
#include "sh_tangentspace.gls"
#include "sh_vertex_data.gls"
#include "sh_instance_info.gls"
#include "sh_camera_info.gls"

//uniform bool u_useParallaxMap; // Defined in push constants
#ifdef GLS_FRAGMENT_SHADER
	#ifndef USE_PARALLAX_MAP
		#define USE_PARALLAX_MAP 1
	#endif
	/*layout(std140,LAYOUT_ID(SHADER_UNIFORM_PARALLAX_SET,0)) uniform Parallax
	{
		float heightScale;
	} u_parallax;*/ // Defined in push constants
#if USE_PARALLAX_MAP == 1
	layout(LAYOUT_ID(DESCRIPTOR_SET_MATERIAL,DESCRIPTOR_SET_MATERIAL_BINDING_PARALLAX_MAP)) uniform sampler2D u_parallaxMap;
#endif

	vec2 get_parallax_coordinates(bool useParallaxMap,vec2 texCoords)
	{
#if USE_PARALLAX_MAP == 1
		if(useParallaxMap == false)
			return texCoords;
		//vec3 viewDir = fs_in.tangentData.cam_dir_to_vert_ts;

		mat3 TBN = fs_in.TBN *inverse(transpose(mat3(get_view_matrix()))); // TODO: This basically undoes what the vertex shader is doing (performance waste), but the TBN needs to be in view-space for lighting. Is there a better way?
		vec3 camPosTs = TBN *u_renderSettings.posCam.xyz;
		vec3 vertPosTs = TBN *fs_in.vert_pos_ws.xyz;
		vec3 viewDir = camPosTs -vertPosTs;

		float height = texture(u_parallaxMap,texCoords).r;
		vec2 p = viewDir.xy /viewDir.z *(height *u_material.material.parallaxHeightScale);
		return texCoords -p;
#else
		return texCoords;
#endif
	}
	vec2 get_parallax_coordinates(vec2 texCoords) {return get_parallax_coordinates(true,texCoords);}

	vec2 apply_parallax(bool useParallaxMap,vec2 texCoords)
	{
		texCoords = get_parallax_coordinates(useParallaxMap,texCoords);
		//if(useParallaxMap == true && (texCoords.x > 1.0 || texCoords.y > 1.0 || texCoords.x < 0.0 || texCoords.y < 0.0)) // Cut off the edges
		//	discard;
		return texCoords;
	}
	vec2 apply_parallax(vec2 texCoords)
	{
		return apply_parallax(true,texCoords);
	}
#endif

#endif
