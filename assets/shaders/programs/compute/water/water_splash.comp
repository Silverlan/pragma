#version 440

#define SHADER_STORAGE_WATER_PARTICLE_SET 0
#define SHADER_STORAGE_WATER_PARTICLE_BINDING 0

#define SHADER_STORAGE_WATER_PARTICLE_POSITION_SET SHADER_STORAGE_WATER_PARTICLE_SET
#define SHADER_STORAGE_WATER_PARTICLE_POSITION_BINDING (SHADER_STORAGE_WATER_PARTICLE_BINDING + 1)

#include "water_particle.glsl"
#include "water_particle_instance.glsl"
#include "/math/math.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(LAYOUT_PUSH_CONSTANTS()) uniform WaterSplash
{
	vec3 origin;
	float radius;
	float radiusSqr;
	float force;
	uint width;
	uint height;
}
u_waterSplash;

void main()
{
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;
	if(x >= u_waterSplash.width || y >= u_waterSplash.height)
		return;
	uint ptIdx = y * u_waterSplash.width + x;
	float l = length_sqr(u_vertices.vertices[ptIdx].position.xyz - u_waterSplash.origin);
	if(l <= u_waterSplash.radiusSqr) {
		l = sqrt(l);
		float factor = (u_waterSplash.radius - l) / u_waterSplash.radius;
		WaterParticle pt = u_particles.particles[ptIdx];
		u_particles.particles[ptIdx].oldHeight = pt.height;
		u_particles.particles[ptIdx].height += u_waterSplash.force * factor;
	}
}
