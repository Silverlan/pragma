#version 440

#define SHADER_STORAGE_WATER_PARTICLE_SET 0
#define SHADER_STORAGE_WATER_PARTICLE_BINDING 0

#define SHADER_STORAGE_WATER_PARTICLE_POSITION_SET SHADER_STORAGE_WATER_PARTICLE_SET
#define SHADER_STORAGE_WATER_PARTICLE_POSITION_BINDING (SHADER_STORAGE_WATER_PARTICLE_BINDING + 1)

#define SHADER_STORAGE_WATER_PARTICLE_TMP_HEIGHT_FIELD_SET SHADER_STORAGE_WATER_PARTICLE_POSITION_SET
#define SHADER_STORAGE_WATER_PARTICLE_TMP_HEIGHT_FIELD_BINDING (SHADER_STORAGE_WATER_PARTICLE_POSITION_BINDING + 1)

#define SHADER_STORAGE_WATER_SURFACE_INFO_SET (SHADER_STORAGE_WATER_PARTICLE_TMP_HEIGHT_FIELD_SET + 1)
#define SHADER_STORAGE_WATER_SURFACE_INFO_BINDING 0

#include "water_particle.glsl"
#include "water_particle_instance.glsl"
#include "water_surface_info.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

void main()
{
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;
	if(x >= u_surfaceInfo.width || y >= u_surfaceInfo.height)
		return;
	const float dt = 0.01;

	uint ptIdx = y * u_surfaceInfo.width + x;
	WaterParticle pt = u_particles.particles[ptIdx];

	float height = pt.height;
	float targetHeight = pt.targetHeight;
	float oldHeight = pt.oldHeight;
	float velocity = pt.velocity;

	// Solve Edges
	//for(uint i=0;i<5;++i)
	//{
	//	for(uint j=0;j<4;++j)
	//	{
	//		uint nbIdx = u_particles.particles[ptIdx].neighbors[j];
	//		if(nbIdx == uint(-1))
	//			break;
	//		/*float d = u_tmpHeightfield.height[nbIdx /4][nbIdx %4] -u_tmpHeightfield.height[ptIdx /4][ptIdx %4];
	//		d *= u_surfaceInfo.propagation;
	//		// TODO: Shared mem for neighbor height?
	//		u_particles.particles[nbIdx].height = min(u_tmpHeightfield.height[nbIdx /4][nbIdx %4] +d,u_surfaceInfo.maxHeight);
	//		height = min(height -d,u_surfaceInfo.maxHeight);*/
	//		float d = u_particles.particles[nbIdx].height -u_particles.particles[ptIdx].height;
	//		d *= u_surfaceInfo.propagation;
	//		// TODO: Shared mem for neighbor height?
	//		u_particles.particles[nbIdx].height = min(u_particles.particles[nbIdx].height +d,u_surfaceInfo.maxHeight);
	//		u_particles.particles[ptIdx].height = min(u_particles.particles[ptIdx].height -d,u_surfaceInfo.maxHeight);
	//	}
	//}

	//memoryBarrierShared();
	//barrier();

	//height = u_particles.particles[ptIdx].height;

	// Solve depths
	float v = targetHeight - height;
	height = min(height + v * 0.0001, u_surfaceInfo.maxHeight); // TODO: stiffness

	// Velocity fixup
	float delta = height - oldHeight;
	velocity = (1.0 / dt) * delta;
	oldHeight = height;

	u_particles.particles[ptIdx].height = height;
	u_particles.particles[ptIdx].targetHeight = targetHeight;
	u_particles.particles[ptIdx].oldHeight = oldHeight;
	u_particles.particles[ptIdx].velocity = velocity;

	u_vertices.vertices[ptIdx].position.xyz = vec3(u_surfaceInfo.origin.x + y * u_surfaceInfo.spacing, u_surfaceInfo.origin.y + height, u_surfaceInfo.origin.z + x * u_surfaceInfo.spacing);
}
