#version 440

#define SHADER_STORAGE_WATER_PARTICLE_SET 0
#define SHADER_STORAGE_WATER_PARTICLE_BINDING 0

#define SHADER_STORAGE_WATER_PARTICLE_WATER_EDGE_DATA_SET SHADER_STORAGE_WATER_PARTICLE_SET
#define SHADER_STORAGE_WATER_PARTICLE_WATER_EDGE_DATA_BINDING (SHADER_STORAGE_WATER_PARTICLE_BINDING + 1)

#define SHADER_STORAGE_WATER_SURFACE_INFO_SET (SHADER_STORAGE_WATER_PARTICLE_WATER_EDGE_DATA_SET + 1)
#define SHADER_STORAGE_WATER_SURFACE_INFO_BINDING 0

#include "water_particle.glsl"
#include "water_surface_info.glsl"
#include "water_surface_edge_data.glsl"

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

void main()
{
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;
	if(x >= u_surfaceInfo.width || y >= u_surfaceInfo.height)
		return;
	const float dt = 0.01;

	uint ptIdx = y * u_surfaceInfo.width + x;

	/*WaterEdge edge = u_waterEdges.edges[edgeIdx];
	float d = u_particles.particles[edge.index1].height -u_particles.particles[edge.index0].height;
	d *= 0.3;//u_surfaceInfo.propagation;

	u_particles.particles[edge.index0].height += d;
	u_particles.particles[edge.index1].height -= d;*/

	float height = u_particles.particles[ptIdx].height;
	for(uint i = 0; i < 4; ++i) {
		uint neighborId = u_particles.particles[ptIdx].neighbors[i];
		float d = 0.0;
		if(neighborId != uint(-1)) {
			d = u_particles.particles[neighborId].height - height;
			d *= 0.1; //u_surfaceInfo.propagation;
		}
		u_waterParticleEdgeData.edgeData[ptIdx].thisToNb[i] = d;
		uint idNb = 0;
		if(ptIdx == (neighborId - 1))
			idNb = 1;
		else if(ptIdx == (neighborId + 1))
			idNb = 2;
		else if(ptIdx == (neighborId - u_surfaceInfo.width))
			idNb = 3;
		u_waterParticleEdgeData.edgeData[neighborId].nbToThis[idNb] = -d;
	}
}
