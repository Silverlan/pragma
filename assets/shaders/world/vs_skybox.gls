#version 440

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

#include "sh_skybox.gls"
#include "../modules/sh_entity_info.gls"
#include "../modules/sh_camera_info.gls"
#include "../modules/vs_buffer_locations.gls"
#include "../modules/vs_instanced_entity_data.gls"
#include "../modules/sh_rendersettings.gls"
#include "../modules/sh_instance_info.gls"
#include "../modules/sh_matrix.gls"

// Unused, but required for correct binding points in OpenGL
#include "../modules/vs_vertex_animation_frame_data.gls"

layout(location = SHADER_VERTEX_BUFFER_LOCATION) in vec3 in_vert_pos;

void main()
{
	mat4 MVP = API_DEPTH_TRANSFORM(u_camera.P) *get_view_matrix() *get_instanced_model_matrix();
	vec3 vtrans = in_vert_pos;
	vec4 MVP_Pos = MVP *vec4(vtrans,1);
	gl_Position = MVP_Pos.xyww;

	vec3 camOffset = (inverse(get_instanced_model_matrix()) *vec4(u_renderSettings.posCam.xyz,1)).xyz;
	vs_out.color = get_instanced_instance_color();
	vs_out.cubemap_dir = in_vert_pos -camOffset;
	vs_out.cubemap_dir = (get_rotation_matrix(u_pushConstants.skyAngles.xyz,u_pushConstants.skyAngles.w) *vec4(vs_out.cubemap_dir,1.0)).xyz;
}