name: Run Pragma Lua Script
description: 'Run a Pragma Lua-script.'
inputs:
  working-directory:
    description: 'The location where Pragma resides. If no Pragma installation is found, it will be installed in this location.'
    required: true
    default: 'pragma'
  lua-code:
    description: 'Lua code to execute'
    required: true
    default: ''
  lua-script:
    description: 'Lua script file to execute'
    required: true
    default: ''
  state:
    description: 'Set to "client" for client-side execution, otherwise "server".'
    required: true
    default: 'client'
  version:
    description: 'The version of Pragma to download (if it not already exists).'
    required: true
    default: 'nightly'
  artifacts-name:
    description: 'If specified, debug files (e.g. logs) will be uploaded as artifacts under this name.'
    required: true
    default: ''
outputs:
  exit-code:
    description: 'The exit code raised by Pragma.'
    value: ${{ steps.handle-result.outputs.exit-code }}
  error:
    description: 'Describes the type of error that has occurred, or "success" if no error occurred.'
    value: ${{ steps.handle-result.outputs.error }}
  lua-error:
    description: 'The Lua error that was caused by running the Lua-code, if there was one.'
    value: ${{ steps.handle-result.outputs.lua-error }}
runs:
  using: "composite"
  steps:
    - name: Download Pragma
      id: download-pragma
      uses: Silverlan/pragma/github_actions/download_pragma@main
      with:
        version: "${{ inputs.version }}"
        working-directory: "${{ inputs.working-directory }}"

    - name: Generate CI Lua-script
      shell: bash
      run: |
        mkdir -p "${{ inputs.working-directory }}/lua"
        scriptFileName="${{ inputs.working-directory }}/lua/ci_script.lua"

        cat <<EOF > ${scriptFileName}
        local cbOnError = game.add_event_listener("OnLuaError",function(err)
          console.print_messageln("A Lua error has occurred! Shutting down...")
          file.write("ci.txt", "lua")
          file.write("ci_lua_error.txt", err)
          engine.shutdown()
        end)
        EOF

        echo "file.write(\"ci.txt\", \"unknown\")" >> ${scriptFileName}
        if [ "${{ inputs.lua-script }}" != "" ]; then
          cat <<EOF >> ${scriptFileName}
        include("${{ inputs.lua-script }}")
        EOF

        fi
        echo "${{ inputs.lua-code }}" >> ${scriptFileName}
        echo "file.write(\"ci.txt\", \"success\")" >> ${scriptFileName}
        cat ${scriptFileName}

    - name: Run script
      shell: bash
      id: run-script
      run: |
        cd "${{ inputs.working-directory }}"
        if [ "$RUNNER_OS" == "Linux" ]; then
          chmod +x ./pragma
        fi
        executableName="pragma"
        luaCmdName="lua_exec"
        if [ "${{ inputs.state }}" == "client" ]; then
          luaCmdName="lua_exec_cl"
        fi
        if [ "$RUNNER_OS" == "Windows" ]; then
          if [ "${{ inputs.state }}" == "server" ]; then
            executableName="pragma_server"
          else
            executableName="pragma.com"
          fi
        elif [ "${{ inputs.state }}" == "server" ]; then
          executableName="pragma_server"
        fi
        ./${executableName} -cli -non_interactive -luaext -log 1 1 -log_file "log.txt" +map "empty" +"${luaCmdName} ci_script.lua"

        EXIT_CODE=$?
        echo "exit-code=$(echo $EXIT_CODE)" >> $GITHUB_OUTPUT

    - name: Check script execution result
      id: handle-result
      shell: bash
      run: |
        echo "error=success" >> $GITHUB_OUTPUT
        
        exit_code=${{ steps.run-script.outputs.exit-code }}
        echo "exit-code=$exit_code" >> $GITHUB_OUTPUT

        if [ $exit_code -ne 0 ]; then
          echo "error=exit" >> $GITHUB_OUTPUT
          exit $exit_code
        fi

        if [ -f "${{ inputs.working-directory }}/ci_lua_error.txt" ]; then
          CI_LUA_ERROR=$(cat "${{ inputs.working-directory }}/ci_lua_error.txt")
          if [ -n "$CI_LUA_ERROR" ]; then
            echo "lua-error=$CI_LUA_ERROR" >> $GITHUB_OUTPUT
          fi
        fi

        CI_CONTENTS=$(cat "${{ inputs.working-directory }}/ci.txt")
        exit_code=$?

        if [ $exit_code -ne 0 ]; then
          echo "error=ci_file" >> $GITHUB_OUTPUT
          exit 1
        fi
        if [ "$CI_CONTENTS" != "success" ]; then
          echo "error=$CI_CONTENTS" >> $GITHUB_OUTPUT
          exit 2
        fi

    - name: Prepare artifact files
      shell: bash
      if: ${{ always() && inputs.artifacts-name != '' }}
      run: |
        mkdir -p artifacts
        if [ -f "${{ inputs.working-directory }}/log.txt" ]; then
          cp ${{ inputs.working-directory }}/log.txt artifacts/log.txt
        fi
        if [ -d "${{ inputs.working-directory }}/crashdumps" ]; then
          cp -r ${{ inputs.working-directory }}/crashdumps artifacts/crashdumps
        fi
        if [ -d "${{ inputs.working-directory }}/artifacts" ] && [ "$(ls -A ${{ inputs.working-directory }}/artifacts)" ]; then
          cp -rf ${{ inputs.working-directory }}/artifacts/* artifacts/
        fi

    - name: Upload artifact files
      uses: actions/upload-artifact@v4
      if: ${{ always() && inputs.artifacts-name != '' }}
      with:
        name: ${{ inputs.artifacts-name }}
        path: "artifacts"

    - name: Clean-up
      shell: bash
      run: |
        if [ -d "artifacts" ]; then
          rm -rf "artifacts"
        fi

        cd "${{ inputs.working-directory }}"
        if [ -e "lua/ci_script.lua" ]; then
          rm "lua/ci_script.lua"
        fi
        if [ -e "log.txt" ]; then
          rm "log.txt"
        fi
        if [ -e "ci.txt" ]; then
          rm "ci.txt"
        fi
        if [ -e "ci_lua_error.txt" ]; then
          rm "ci_lua_error.txt"
        fi
        if [ -d "crashdumps" ]; then
          rm -rf "crashdumps"
        fi
        if [ -d "artifacts" ]; then
          rm -rf "artifacts"
        fi
